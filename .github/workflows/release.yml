name: release-linux

# Workflow created using ChatGPT 5 Thinking
# https://chatgpt.com/share/68bd99e8-9fac-800d-b946-7a522a655bda
# Some modifications had to be made to make it work

permissions:
  contents: write  # To create releases
  packages: write  # To upload release assets

# The workflow should be triggered when a new tag is pushed
on:
  push:
    tags:
      - 'v*.*.*'  # Match version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allow manual triggering of the workflow

jobs:
  build-and-relase:
    runs-on: ubuntu-latest
    env:
      # The path of the two Rust projects
      WEBSERVER_PATH: src/webserver
      DEPLOY_PATH: src/deploy

      # Specify what target to build for, we only need linux
      TARGET: x86_64-unknown-linux-musl

      # Force fully static MUSL binaries
      RUSTFLAGS: -C target-feature=+crt-static

      # Tell cc / build scripts which C toolchain to use for MUSL
      CC_x86_64_unknown_linux_musl: musl-gcc
      AR_x86_64_unknown_linux_musl: ar
      CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: musl-gcc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust (stable + musl target)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl

      - name: Install MUSL tools
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          rustup target add x86_64-unknown-linux-musl

      - name: Cache cargo build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          # Different workspace paths for the two projects
          workspaces: |
            ${{ env.WEBSERVER_PATH }}
            ${{ env.DEPLOY_PATH }}

      - name: Build webserver
        run: |
          cargo build \
            --manifest-path ${{ env.WEBSERVER_PATH }}/Cargo.toml \
            --release \
            --target ${{ env.TARGET }}

      - name: Build deploy
        run: |
          cargo build \
            --manifest-path ${{ env.DEPLOY_PATH }}/Cargo.toml \
            --release \
            --target ${{ env.TARGET }}

      - name: Package binaries
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF_NAME}"
          mkdir -p dist

          package_dir () {
            local dir="$1"
            local bindir="src/$dir/target/$TARGET/release"

            # Find executables in the release dir (ignores non-executable libs)
            mapfile -t bins < <(find "$bindir" -maxdepth 1 -type f -executable -printf "%f\n")

            if [ "${#bins[@]}" -eq 0 ]; then
              echo "No executables found in $bindir"; exit 1
            fi

            for name in "${bins[@]}"; do
              tarball="dist/${name}-${TARGET}.tar.gz"
              tar -C "$bindir" -czf "$tarball" "$name"
              echo "Packaged $tarball"
            done
          }

          package_dir "webserver"
          package_dir "deploy"

          # Create checksums for all tarballs
          (cd dist && sha256sum *.tar.gz > sha256sums.txt)
          echo "Generated dist/sha256sums.txt"

      - name: Create Release and upload binaries
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            dist/*.tar.gz
            dist/sha256sums.txt
            src/run.sh
            src/run-node.sh
          generate_release_notes: true